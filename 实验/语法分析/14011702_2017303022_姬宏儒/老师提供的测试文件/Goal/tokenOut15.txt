EOF

1		class	CLASS

1		WhatHappen	IDENTIFIER

1		{	LBRACE

2		public	PUBLIC

2		static	STATIC

2		void	VOID

2		main	MAIN

2		(	LPAREN

2		String	STRING

2		[	LBRACKET

2		]	RBRACKET

2		args	IDENTIFIER

2		)	RPAREN

2		{	LBRACE

3		while	WHILE

3		(	LPAREN

3		!	BANG

3		false	FALSE

3		)	RPAREN

3		{	LBRACE

4		handle	IDENTIFIER

4		=	EQ

4		mc	IDENTIFIER

4		.	DOT

4		start	IDENTIFIER

4		(	LPAREN

4		10	INTEGERLITERAL

4		,	COMMA

4		10	INTEGERLITERAL

4		)	RPAREN

4		;	SEMI

5		handle1	IDENTIFIER

5		=	EQ

5		mc	IDENTIFIER

5		.	DOT

5		start	IDENTIFIER

5		(	LPAREN

5		10	INTEGERLITERAL

5		,	COMMA

5		10	INTEGERLITERAL

5		)	RPAREN

5		;	SEMI

6		handle2	IDENTIFIER

6		=	EQ

6		mc	IDENTIFIER

6		.	DOT

6		start	IDENTIFIER

6		(	LPAREN

6		10	INTEGERLITERAL

6		,	COMMA

6		10	INTEGERLITERAL

6		)	RPAREN

6		;	SEMI

7		handle3	IDENTIFIER

7		=	EQ

7		mc	IDENTIFIER

7		.	DOT

7		start	IDENTIFIER

7		(	LPAREN

7		10	INTEGERLITERAL

7		,	COMMA

7		10	INTEGERLITERAL

7		)	RPAREN

7		;	SEMI

8		handle4	IDENTIFIER

8		=	EQ

8		mc	IDENTIFIER

8		.	DOT

8		start	IDENTIFIER

8		(	LPAREN

8		10	INTEGERLITERAL

8		,	COMMA

8		10	INTEGERLITERAL

8		)	RPAREN

8		;	SEMI

9		}	RBRACE

10		}	RBRACE

11		}	RBRACE

13		class	CLASS

13		NewHappend	IDENTIFIER

13		{	LBRACE

14		public	PUBLIC

14		int	INT

14		newHappend	IDENTIFIER

14		(	LPAREN

14		int	INT

14		args	IDENTIFIER

14		)	RPAREN

14		{	LBRACE

15		MyClient	IDENTIFIER

15		mc	IDENTIFIER

15		;	SEMI

16		int	INT

16		handle	IDENTIFIER

16		;	SEMI

18		mc	IDENTIFIER

18		=	EQ

18		new	NEW

18		MyClient	IDENTIFIER

18		(	LPAREN

18		)	RPAREN

18		;	SEMI

19		while	WHILE

19		(	LPAREN

19		!	BANG

19		false	FALSE

19		)	RPAREN

19		{	LBRACE

20		handle	IDENTIFIER

20		=	EQ

20		mc	IDENTIFIER

20		.	DOT

20		start	IDENTIFIER

20		(	LPAREN

20		488	INTEGERLITERAL

20		,	COMMA

20		388	INTEGERLITERAL

20		)	RPAREN

20		;	SEMI

21		}	RBRACE

21		return	RETURN

21		handle	IDENTIFIER

21		;	SEMI

22		}	RBRACE

23		}	RBRACE

25		class	CLASS

25		Client	IDENTIFIER

25		{	LBRACE

26		int	INT

26		in	IDENTIFIER

26		;	SEMI

27		int	INT

27		out	IDENTIFIER

27		;	SEMI

28		int	INT

28		[	LBRACKET

28		]	RBRACKET

28		messagelist	IDENTIFIER

28		;	SEMI

29		int	INT

29		index	IDENTIFIER

29		;	SEMI

30		public	PUBLIC

30		boolean	BOOLEAN

30		init	IDENTIFIER

30		(	LPAREN

30		)	RPAREN

30		{	LBRACE

31		index	IDENTIFIER

31		=	EQ

31		0	INTEGERLITERAL

31		;	SEMI

32		messagelist	IDENTIFIER

32		=	EQ

32		new	NEW

32		int	INT

32		[	LBRACKET

32		10	INTEGERLITERAL

32		]	RBRACKET

32		;	SEMI

33		in	IDENTIFIER

33		=	EQ

33		0	INTEGERLITERAL

33		;	SEMI

34		out	IDENTIFIER

34		=	EQ

34		0	INTEGERLITERAL

34		;	SEMI

35		return	RETURN

35		true	TRUE

35		;	SEMI

36		}	RBRACE

37		public	PUBLIC

37		int	INT

37		run	IDENTIFIER

37		(	LPAREN

37		int	INT

37		host	IDENTIFIER

37		,	COMMA

37		int	INT

37		port	IDENTIFIER

37		)	RPAREN

37		{	LBRACE

38		int	INT

38		handle	IDENTIFIER

38		;	SEMI

39		handle	IDENTIFIER

39		=	EQ

39		this	THIS

39		.	DOT

39		Juggling	IDENTIFIER

39		(	LPAREN

39		)	RPAREN

39		;	SEMI

40		return	RETURN

40		handle	IDENTIFIER

40		;	SEMI

41		}	RBRACE

43		public	PUBLIC

43		int	INT

43		getMsg	IDENTIFIER

43		(	LPAREN

43		)	RPAREN

43		{	LBRACE

44		int	INT

44		tmp	IDENTIFIER

44		;	SEMI

45		tmp	IDENTIFIER

45		=	EQ

45		messagelist	IDENTIFIER

45		.	DOT

45		length	LENGTH

45		;	SEMI

46		if	IF

46		(	LPAREN

46		this	THIS

46		.	DOT

46		isVoid	IDENTIFIER

46		(	LPAREN

46		)	RPAREN

46		)	RPAREN

46		{	LBRACE

47		tmp	IDENTIFIER

47		=	EQ

47		tmp	IDENTIFIER

47		-	SUB

47		1	INTEGERLITERAL

47		;	SEMI

48		}	RBRACE

49		else	ELSE

49		{	LBRACE

50		tmp	IDENTIFIER

50		=	EQ

50		tmp	IDENTIFIER

50		*	STAR

50		2	INTEGERLITERAL

50		;	SEMI

51		}	RBRACE

52		if	IF

52		(	LPAREN

52		index	IDENTIFIER

52		<	LT

52		10	INTEGERLITERAL

52		)	RPAREN

52		{	LBRACE

53		messagelist	IDENTIFIER

53		[	LBRACKET

53		index	IDENTIFIER

53		]	RBRACKET

53		=	EQ

53		tmp	IDENTIFIER

53		;	SEMI

54		index	IDENTIFIER

54		=	EQ

54		index	IDENTIFIER

54		+	PLUS

54		1	INTEGERLITERAL

54		;	SEMI

55		}	RBRACE

56		else	ELSE

56		{	LBRACE

57		index	IDENTIFIER

57		=	EQ

57		0	INTEGERLITERAL

57		;	SEMI

58		}	RBRACE

59		return	RETURN

59		tmp	IDENTIFIER

59		;	SEMI

60		}	RBRACE

62		public	PUBLIC

62		boolean	BOOLEAN

62		isVoid	IDENTIFIER

62		(	LPAREN

62		)	RPAREN

62		{	LBRACE

63		boolean	BOOLEAN

63		flag	IDENTIFIER

63		;	SEMI

64		if	IF

64		(	LPAREN

64		0	INTEGERLITERAL

64		<	LT

64		messagelist	IDENTIFIER

64		.	DOT

64		length	LENGTH

64		)	RPAREN

64		{	LBRACE

65		flag	IDENTIFIER

65		=	EQ

65		false	FALSE

65		;	SEMI

66		}	RBRACE

67		else	ELSE

67		{	LBRACE

68		flag	IDENTIFIER

68		=	EQ

68		true	TRUE

68		;	SEMI

69		}	RBRACE

70		return	RETURN

70		flag	IDENTIFIER

70		;	SEMI

71		}	RBRACE

73		public	PUBLIC

73		int	INT

73		Juggling	IDENTIFIER

73		(	LPAREN

73		)	RPAREN

73		{	LBRACE

74		boolean	BOOLEAN

74		t	IDENTIFIER

74		;	SEMI

75		int	INT

75		tmp1	IDENTIFIER

75		;	SEMI

76		int	INT

76		tmp2	IDENTIFIER

76		;	SEMI

77		int	INT

77		tmp3	IDENTIFIER

77		;	SEMI

78		tmp1	IDENTIFIER

78		=	EQ

78		2	INTEGERLITERAL

78		;	SEMI

79		tmp2	IDENTIFIER

79		=	EQ

79		3	INTEGERLITERAL

79		;	SEMI

80		tmp3	IDENTIFIER

80		=	EQ

80		4	INTEGERLITERAL

80		;	SEMI

81		while	WHILE

81		(	LPAREN

81		(	LPAREN

81		tmp2	IDENTIFIER

81		<	LT

81		tmp3	IDENTIFIER

81		)	RPAREN

81		&&	AMPAMP

81		(	LPAREN

81		tmp1	IDENTIFIER

81		<	LT

81		tmp2	IDENTIFIER

81		)	RPAREN

81		)	RPAREN

81		{	LBRACE

82		tmp1	IDENTIFIER

82		=	EQ

82		tmp3	IDENTIFIER

82		-	SUB

82		tmp2	IDENTIFIER

82		;	SEMI

83		tmp2	IDENTIFIER

83		=	EQ

83		tmp2	IDENTIFIER

83		-	SUB

83		tmp1	IDENTIFIER

83		;	SEMI

84		tmp3	IDENTIFIER

84		=	EQ

84		tmp2	IDENTIFIER

84		*	STAR

84		tmp1	IDENTIFIER

84		;	SEMI

85		t	IDENTIFIER

85		=	EQ

85		this	THIS

85		.	DOT

85		HolyLight	IDENTIFIER

85		(	LPAREN

85		)	RPAREN

85		;	SEMI

86		}	RBRACE

87		return	RETURN

87		(	LPAREN

87		tmp1	IDENTIFIER

87		*	STAR

87		tmp2	IDENTIFIER

87		+	PLUS

87		tmp3	IDENTIFIER

87		)	RPAREN

87		*	STAR

87		messagelist	IDENTIFIER

87		.	DOT

87		length	LENGTH

87		;	SEMI

88		}	RBRACE

91		public	PUBLIC

91		boolean	BOOLEAN

91		HolyLight	IDENTIFIER

91		(	LPAREN

91		)	RPAREN

91		{	LBRACE

92		in	IDENTIFIER

92		=	EQ

92		in	IDENTIFIER

92		+	PLUS

92		1	INTEGERLITERAL

92		;	SEMI

93		out	IDENTIFIER

93		=	EQ

93		out	IDENTIFIER

93		-	SUB

93		1	INTEGERLITERAL

93		;	SEMI

94		System.out.println	SYSTEM_OUT_PRINTLN

94		(	LPAREN

94		false	FALSE

94		)	RPAREN

94		;	SEMI

94		return	RETURN

94		false	FALSE

94		;	SEMI

95		}	RBRACE

96		}	RBRACE

98		class	CLASS

98		MyClient	IDENTIFIER

98		extends	EXTENDS

98		Client	IDENTIFIER

98		{	LBRACE

100		public	PUBLIC

100		int	INT

100		start	IDENTIFIER

100		(	LPAREN

100		int	INT

100		host	IDENTIFIER

100		,	COMMA

100		int	INT

100		port	IDENTIFIER

100		)	RPAREN

100		{	LBRACE

101		int	INT

101		handle	IDENTIFIER

101		;	SEMI

102		handle	IDENTIFIER

102		=	EQ

102		this	THIS

102		.	DOT

102		run	IDENTIFIER

102		(	LPAREN

102		)	RPAREN

102		;	SEMI

103		return	RETURN

103		handle	IDENTIFIER

103		;	SEMI

104		}	RBRACE

105		}	RBRACE

EOF

